#!/bin/bash
# DockerÁí∞Â¢É„ÅÆÊ∫ñÂÇô„Å®Ê®©Èôê‰øÆÊ≠£„ÇíÂê´„ÇÄÂÆåÂÖ®„Å™„ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà

echo "======================================================================"
echo "üîß Preparing Docker Environment for Phase 2 Tests"
echo "======================================================================"
echo ""

# Docker„Ç≥„É≥„ÉÜ„Éä„ÅåÂÆüË°å‰∏≠„ÅãÁ¢∫Ë™ç
if ! docker ps | grep -q ai-ft-container; then
    echo "‚ùå Docker container 'ai-ft-container' is not running"
    echo ""
    echo "Starting container..."
    cd docker
    docker-compose up -d
    sleep 5
    cd ..
fi

echo "‚úÖ Docker container is running"
echo ""

# ÂøÖË¶Å„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆ‰ΩúÊàê„Å®Ê®©ÈôêË®≠ÂÆö
echo "üîß Setting up directories with proper permissions..."
echo "----------------------------------------------------------------------"

# „Ç≥„É≥„ÉÜ„ÉäÂÜÖ„Å´Êõ∏„ÅçËæº„ÅøÂèØËÉΩ„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
docker exec ai-ft-container bash -c "
    # /tmpÂÜÖ„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    mkdir -p /tmp/ai_ft_cache/dependencies
    chmod -R 777 /tmp/ai_ft_cache
    
    # /workspaceÂÜÖ„Å´„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê
    mkdir -p /workspace/.cache/ai_ft/dependencies
    chmod -R 777 /workspace/.cache
    
    # „É≠„Ç∞„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇÇ‰ΩúÊàê
    mkdir -p /workspace/logs/health
    chmod -R 777 /workspace/logs
    
    echo '‚úÖ Directories created with proper permissions'
"

# ÂøÖË¶Å„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´
echo ""
echo "üì¶ Installing required packages..."
echo "----------------------------------------------------------------------"
docker exec ai-ft-container pip install psutil loguru 2>/dev/null
echo "‚úÖ Packages installed"

# ‰æùÂ≠òÈñ¢‰øÇ„ÉÅ„Çß„ÉÉ„ÇØ
echo ""
echo "======================================================================"
echo "üìã Checking Dependencies in Container"
echo "======================================================================"

docker exec ai-ft-container python3 -c "
import sys
import os
sys.path.insert(0, '/workspace')

# Áí∞Â¢ÉÂ§âÊï∞„Åß„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåáÂÆö
os.environ['AI_FT_CACHE_DIR'] = '/tmp/ai_ft_cache'

try:
    from src.rag.dependencies.dependency_manager import RAGDependencyManager
    
    manager = RAGDependencyManager()
    result = manager.check_all_dependencies(use_cache=False)
    
    print(f'‚úÖ System Can Run: {result.can_run}')
    print(f'‚úÖ All Dependencies Satisfied: {result.is_satisfied}')
    print()
    
    if result.installed_versions:
        print('üì¶ Installed Core Packages:')
        core_packages = ['transformers', 'torch', 'sentence_transformers', 'pydantic']
        for pkg in core_packages:
            if pkg in result.installed_versions:
                print(f'  ‚úÖ {pkg}: {result.installed_versions[pkg]}')
            else:
                print(f'  ‚ùå {pkg}: Not found')
    
    if result.alternatives_used:
        print()
        print('üîÑ Alternative Packages Used:')
        for orig, alt in result.alternatives_used.items():
            print(f'  - {orig} ‚Üí {alt}')
    
    if result.warnings:
        print()
        print('‚ö†Ô∏è Warnings:')
        for warning in result.warnings[:3]:
            print(f'  - {warning}')
            
except Exception as e:
    print(f'‚ùå Error checking dependencies: {e}')
    import traceback
    traceback.print_exc()
"

# Phase 2Áµ±Âêà„ÉÜ„Çπ„Éà„ÅÆÂÆüË°å
echo ""
echo "======================================================================"
echo "üß™ Running Phase 2 Integration Tests"
echo "======================================================================"

docker exec ai-ft-container python3 -c "
import sys
import os
import asyncio
sys.path.insert(0, '/workspace')

# Áí∞Â¢ÉÂ§âÊï∞„Åß„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåáÂÆö
os.environ['AI_FT_CACHE_DIR'] = '/tmp/ai_ft_cache'

async def run_tests():
    try:
        # „ÉÜ„Çπ„Éà„Çπ„ÇØ„É™„Éó„Éà„ÇíÁõ¥Êé•ÂÆüË°å
        exec(open('/workspace/scripts/test_phase2_integration.py').read())
    except Exception as e:
        print(f'‚ùå Test execution error: {e}')
        import traceback
        traceback.print_exc()

# „ÉÜ„Çπ„ÉàÂÆüË°å
try:
    asyncio.run(run_tests())
except Exception as e:
    print(f'Alternative execution method...')
    # Áõ¥Êé•ÂÆüË°å
    import subprocess
    result = subprocess.run(['python3', '/workspace/scripts/test_phase2_integration.py'], 
                          capture_output=True, text=True)
    print(result.stdout)
    if result.stderr:
        print('Errors:', result.stderr)
"

# „Ç∑„Çπ„ÉÜ„É†ÊúÄÈÅ©Âåñ„ÉÜ„Çπ„Éà„ÅÆÂÆüË°å
echo ""
echo "======================================================================"
echo "‚ö° Running System Optimization Test"
echo "======================================================================"

docker exec ai-ft-container python3 -c "
import sys
import os
sys.path.insert(0, '/workspace')

# Áí∞Â¢ÉÂ§âÊï∞„Åß„Ç≠„É£„ÉÉ„Ç∑„É•„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÊåáÂÆö
os.environ['AI_FT_CACHE_DIR'] = '/tmp/ai_ft_cache'

try:
    # Á∞°ÊòìÁöÑ„Å™ÊúÄÈÅ©Âåñ„ÉÅ„Çß„ÉÉ„ÇØ
    from src.rag.dependencies.dependency_manager import RAGDependencyManager
    
    print('üîç Checking optimization opportunities...')
    
    manager = RAGDependencyManager()
    result = manager.check_all_dependencies(use_cache=False)
    
    print()
    print('üìä Optimization Suggestions:')
    
    # „Ç™„Éó„Ç∑„Éß„É≥‰æùÂ≠òÈñ¢‰øÇ„ÅÆÊèêÊ°à
    if result.missing_optional:
        print('  üì¶ Optional packages to consider:')
        for pkg in result.missing_optional[:3]:
            print(f'    - {pkg}')
    
    # ‰ª£Êõø„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅÆÊèêÊ°à
    if result.alternatives_used:
        print('  üîÑ Consider installing primary packages:')
        for orig, alt in result.alternatives_used.items():
            print(f'    - Install {orig} instead of {alt}')
    
    # „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊèêÊ°à
    import psutil
    mem = psutil.virtual_memory()
    if mem.percent > 80:
        print(f'  ‚ö†Ô∏è High memory usage: {mem.percent:.1f}%')
        print('    - Consider reducing batch size')
        print('    - Enable model quantization')
    
    print()
    print('‚úÖ Optimization check complete')
    
except Exception as e:
    print(f'‚ùå Optimization test error: {e}')
    import traceback
    traceback.print_exc()
"

echo ""
echo "======================================================================"
echo "‚úÖ All Phase 2 Tests Completed"
echo "======================================================================"
echo ""
echo "Summary:"
echo "  - Dependencies checked"
echo "  - Integration tests executed"
echo "  - Optimization analysis performed"
echo ""
echo "Check the output above for any errors or warnings."
echo "======================================================================"
